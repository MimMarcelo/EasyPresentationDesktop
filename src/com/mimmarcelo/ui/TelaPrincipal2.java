/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mimmarcelo.ui;

import com.mimmarcelo.classes.Bluetooth2;
import com.mimmarcelo.classes.M;
import java.awt.AWTException;
import java.awt.Robot;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.util.List;
import javax.bluetooth.RemoteDevice;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import com.mimmarcelo.classes.IBluetooth;
import java.awt.Dimension;
import java.awt.MouseInfo;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.event.MouseEvent;

/**
 *
 * @author Marcelo Júnior
 */
public class TelaPrincipal2 extends javax.swing.JFrame implements IBluetooth{

    //PROPRIEDADES
    private Robot pc;
    private Bluetooth2 bluetooth;
    private DefaultListModel<String> lista;
    private JLabel[] labels;
    
    Point mouse;
    private int screenX;
    private int screenY;
    private int xAtual;
    private int yAtual;
    
    //AÇÕES PREESTABELECIDAS DOS EVENTOS
    private final ActionListener conectarDispositivo = new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            JButton b = (JButton)e.getSource();
            if(b.getText().equals(M.txt.CONECTAR)){
                if(bluetooth.conectar()){
                    atualizarHistorico(M.txt.CONEXAO_ESTABELECIDA);
                    b.setText(M.txt.DESCONECTAR);
                    bluetooth.esperarMensagens();
                }
                else{
                    atualizarHistorico(M.txt.ERRO_AO_TENTAR_CONEXAO);
                }
            }
            else{
                if(bluetooth.desconectar()){
                    b.setText(M.txt.CONECTAR);
                    atualizarHistorico(M.txt.CONEXAO_ENCERRADA);
                }
                else{
                    atualizarHistorico(M.txt.ERRO_AO_TENTAR_DESCONEXAO);
                }
            }
        }
    };
    
    private final ActionListener atualizarLista = new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            if(bluetooth.atualizarListaDeDispositivos(false)){
                atualizarListaDeDispositivos(bluetooth.getListaDeDispositivos());
                atualizarHistorico(M.txt.LISTA_DE_DISPOSITIVOS_ATUALIZADA);
            }
            else{
                atualizarHistorico(M.txt.ERRO_AO_TENTAR_ATUALIZAR_LISTA);
            }
        }
    };
    
    private final ListSelectionListener selecionarDispositivo = new ListSelectionListener() {
        @Override
        public void valueChanged(ListSelectionEvent e) {
            if(e.getValueIsAdjusting() == false){
                try {
                    if(bluetooth.setDispositivoSelecionado(lstDispositivos.getSelectedIndex())){
                        RemoteDevice d = bluetooth.getDispositivoSelecionado();
                        lblNomeDispositivo.setText(d.getFriendlyName(false));
                        lblMacDispositivo.setText(d.getBluetoothAddress());
                        lblStatusDispositivo.setText(M.txt.PRONTO_PARA_CONEXAO);
                        atualizarHistorico("Dispositivo '"+lstDispositivos.getSelectedValue()+"' selecionado");
                    }
                    else{
                        atualizarHistorico("Não foi possível selecionar o dispositivo");
                    }
                } catch (IOException ex) {
                    atualizarHistorico("Não foi possível selecionar o dispositivo");
                }
            }
        }
    };
    
    /**
     * Creates new form TelaPrincipal2
     */
    public TelaPrincipal2() {
        initComponents();
        iniciarComponentes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblDispositivosPareados = new javax.swing.JLabel();
        scrollDispositivos = new javax.swing.JScrollPane();
        lstDispositivos = new javax.swing.JList<>();
        pnlDetalhes = new javax.swing.JPanel();
        lblDispositivoSelecionado = new javax.swing.JLabel();
        lblNome = new javax.swing.JLabel();
        lblNomeDispositivo = new javax.swing.JLabel();
        lblMac = new javax.swing.JLabel();
        lblMacDispositivo = new javax.swing.JLabel();
        lblStatus = new javax.swing.JLabel();
        lblStatusDispositivo = new javax.swing.JLabel();
        btnConectar = new javax.swing.JButton();
        pnlHistorico = new javax.swing.JPanel();
        lblHistorico = new javax.swing.JLabel();
        btnAtualizarLista = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblDispositivosPareados.setFont(M.fonte.TITULO);
        lblDispositivosPareados.setText(M.txt.DISPOSITIVOS_PAREADOS);

        scrollDispositivos.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        scrollDispositivos.setMaximumSize(null);
        scrollDispositivos.setMinimumSize(null);

        lstDispositivos.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        lstDispositivos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstDispositivos.setLayoutOrientation(javax.swing.JList.VERTICAL_WRAP);
        lstDispositivos.setMaximumSize(null);
        lstDispositivos.setMinimumSize(null);
        lstDispositivos.setPreferredSize(null);
        scrollDispositivos.setViewportView(lstDispositivos);

        pnlDetalhes.setBackground(M.cor.FUNDO_SECUNDARIO);
        pnlDetalhes.setMaximumSize(null);

        lblDispositivoSelecionado.setFont(M.fonte.TITULO);
        lblDispositivoSelecionado.setForeground(M.cor.TEXTO_SECUNDARIO);
        lblDispositivoSelecionado.setText(M.txt.DISPOSITIVO_SELECIONADO);

        lblNome.setForeground(M.cor.TEXTO_SECUNDARIO);
        lblNome.setText(M.txt.NOME);

        lblNomeDispositivo.setForeground(M.cor.TEXTO_SECUNDARIO);
        lblNomeDispositivo.setText(M.txt.NENHUM_DISPOSITIVO_SELECIONADO);

        lblMac.setForeground(M.cor.TEXTO_SECUNDARIO);
        lblMac.setText(M.txt.MAC);

        lblMacDispositivo.setForeground(M.cor.TEXTO_SECUNDARIO);
        lblMacDispositivo.setText(M.txt.NENHUM_DISPOSITIVO_SELECIONADO);

        lblStatus.setForeground(M.cor.TEXTO_SECUNDARIO);
        lblStatus.setText(M.txt.STATUS);

        lblStatusDispositivo.setForeground(M.cor.TEXTO_SECUNDARIO);
        lblStatusDispositivo.setText(M.txt.NENHUM_DISPOSITIVO_SELECIONADO);

        btnConectar.setText(M.txt.CONECTAR);

        javax.swing.GroupLayout pnlDetalhesLayout = new javax.swing.GroupLayout(pnlDetalhes);
        pnlDetalhes.setLayout(pnlDetalhesLayout);
        pnlDetalhesLayout.setHorizontalGroup(
            pnlDetalhesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDetalhesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlDetalhesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblDispositivoSelecionado)
                    .addGroup(pnlDetalhesLayout.createSequentialGroup()
                        .addComponent(lblNome)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblNomeDispositivo))
                    .addGroup(pnlDetalhesLayout.createSequentialGroup()
                        .addComponent(lblMac)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblMacDispositivo))
                    .addGroup(pnlDetalhesLayout.createSequentialGroup()
                        .addComponent(lblStatus)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblStatusDispositivo))
                    .addComponent(btnConectar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlDetalhesLayout.setVerticalGroup(
            pnlDetalhesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDetalhesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblDispositivoSelecionado)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlDetalhesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNome)
                    .addComponent(lblNomeDispositivo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlDetalhesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMac)
                    .addComponent(lblMacDispositivo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlDetalhesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblStatus)
                    .addComponent(lblStatusDispositivo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnConectar)
                .addContainerGap(132, Short.MAX_VALUE))
        );

        pnlHistorico.setBackground(M.cor.FUNDO_SECUNDARIO);
        pnlHistorico.setMaximumSize(null);
        pnlHistorico.setName(""); // NOI18N

        lblHistorico.setFont(M.fonte.TITULO);
        lblHistorico.setForeground(M.cor.TEXTO_SECUNDARIO);
        lblHistorico.setText(M.txt.HISTORICO);

        javax.swing.GroupLayout pnlHistoricoLayout = new javax.swing.GroupLayout(pnlHistorico);
        pnlHistorico.setLayout(pnlHistoricoLayout);
        pnlHistoricoLayout.setHorizontalGroup(
            pnlHistoricoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlHistoricoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblHistorico)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlHistoricoLayout.setVerticalGroup(
            pnlHistoricoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlHistoricoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblHistorico)
                .addContainerGap(64, Short.MAX_VALUE))
        );

        btnAtualizarLista.setText(M.txt.ATUALIZAR_LISTA);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblDispositivosPareados)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAtualizarLista))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(scrollDispositivos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 163, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pnlHistorico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(pnlDetalhes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDispositivosPareados)
                    .addComponent(btnAtualizarLista))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pnlDetalhes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnlHistorico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 53, Short.MAX_VALUE))
                    .addComponent(scrollDispositivos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new TelaPrincipal2().setVisible(true);
        });
    }

    private void iniciarComponentes(){
        
        try {
            pc = new Robot();
        } catch (AWTException ex) {
            System.out.println("Erro inesperado, não foi possível iniciar recurso de controle remoto");
        }
        
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        screenX = (int)screenSize.getWidth();
        screenY = (int)screenSize.getHeight();
        mouse = MouseInfo.getPointerInfo().getLocation();
        
        //CONFIGURA A JANELA
        getContentPane().setBackground(M.cor.FUNDO_PADRAO); //COR DE FUNDO
        setSize(M.tamanho.TELA_LARGURA, M.tamanho.TELA_ALTURA); //TAMANHO DA JANELA
        setIconImage(M.img.LOGOMARCA); //FIGURA DO APP
        setTitle(M.txt.EASY_PRESENTATION); //TEXTO
        setResizable(false); //EVITA QUE POSSA SER REDIMENSIONADO
        setLocationRelativeTo(null); //ABRE O APP CENTRALIZADO NA TELA
                
        //CONFIGURA A LISTA DE DISPOSITIVOS
        lstDispositivos.setSize(M.tamanho.LISTA_LARGURA, M.tamanho.LISTA_ALTURA); //DEFINE O TAMANHO DA LISTA
        lstDispositivos.setPreferredSize(lstDispositivos.getSize()); //DEFINE O TAMANHO DA LISTA
        scrollDispositivos.setSize(M.tamanho.LISTA_SCROLL_LARGURA, M.tamanho.LISTA_SCROLL_ALTURA); //DEFINE O TAMANHO DO SCROLL DA LISTA
        scrollDispositivos.setPreferredSize(scrollDispositivos.getSize()); //DEFINE O TAMANHO DO SCROLL DA LISTA
        lstDispositivos.setFont(M.fonte.NORMAL); //DEFINE A FONTE DO TEXTO
        lstDispositivos.addListSelectionListener(selecionarDispositivo);
        lista = new DefaultListModel<>();
        lstDispositivos.setModel(lista);
        
        //BOTÃO PARA ATUALIZAR LISTA
        btnAtualizarLista.addActionListener(atualizarLista);
        
        //CONFIGURA PAINEL DE DETALHES
        pnlDetalhes.setSize(M.tamanho.PAINEL_LARGURA, M.tamanho.PAINEL_ALTURA); //DEFINE O TAMANHO DO PAINEL
        pnlDetalhes.setPreferredSize(pnlDetalhes.getSize()); //DEFINE O TAMANHO DO PAINEL
        
        btnConectar.addActionListener(conectarDispositivo);
        
        //CONFIGURA PAINEL DE HISTÓRICO
        pnlHistorico.setSize(M.tamanho.PAINEL_LARGURA, M.tamanho.PAINEL_HISTORICO_ALTURA); //DEFINE O TAMANHO DO PAINEL
        pnlHistorico.setPreferredSize(pnlHistorico.getSize()); //DEFINE O TAMANHO DO PAINEL
        
        
        labels = new JLabel[4];
        labels[0] = new JLabel(M.txt.EASY_PRESENTATION_INICIADO);
        labels[1] = new JLabel(M.txt.RETICENCIAS);
        labels[2] = new JLabel(M.txt.RETICENCIAS);
        labels[3] = new JLabel(M.txt.RETICENCIAS);
        
        for(JLabel label: labels)
            label.setForeground(M.cor.TEXTO_SECUNDARIO);

        //POSICIONA OS LABELs CORRETAMENTE NO PAINEL DE HISTÓRICO
        javax.swing.GroupLayout pnlHistoricoLayout = new javax.swing.GroupLayout(pnlHistorico);
        pnlHistorico.setLayout(pnlHistoricoLayout);
        pnlHistoricoLayout.setHorizontalGroup(
            pnlHistoricoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlHistoricoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlHistoricoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblHistorico)
                    .addGroup(pnlHistoricoLayout.createSequentialGroup()
                        .addComponent(labels[0]))
                    .addGroup(pnlHistoricoLayout.createSequentialGroup()
                        .addComponent(labels[1]))
                    .addGroup(pnlHistoricoLayout.createSequentialGroup()
                        .addComponent(labels[2]))
                    .addGroup(pnlHistoricoLayout.createSequentialGroup()
                        .addComponent(labels[3]))
                    
                ))
        );
        pnlHistoricoLayout.setVerticalGroup(
            pnlHistoricoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlHistoricoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblHistorico)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlHistoricoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labels[0]))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlHistoricoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labels[1]))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlHistoricoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labels[2]))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlHistoricoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labels[3]))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
        );
        bluetooth = new Bluetooth2(this);
        if(bluetooth.isFuncionando())
            atualizarListaDeDispositivos(bluetooth.getListaDeDispositivos());
    }
    
    private void atualizarHistorico(String msg){
        for(int i = (labels.length-1); i >= 1 ; i--){
            labels[i].setText(labels[i-1].getText());
        }
        labels[0].setText(msg);
        System.out.println(msg);
    }
    
    private void atualizarListaDeDispositivos(List<String> listaDeDispositivos) {
        listaDeDispositivos.forEach((nome) -> {
            lista.addElement(nome);
        });
    }
    
    @Override
    public void recebeMensagem(String msg) {
        if(msg.endsWith("esc")){
            pc.keyPress(KeyEvent.VK_ESCAPE);
            pc.keyRelease(KeyEvent.VK_ESCAPE);
        }
        else if(msg.endsWith("b")){
            pc.keyPress(KeyEvent.VK_DOWN);
            pc.keyRelease(KeyEvent.VK_DOWN);
        }
        else if(msg.endsWith("c")){
            pc.keyPress(KeyEvent.VK_UP);
            pc.keyRelease(KeyEvent.VK_UP);
        }
        else if(msg.endsWith("d")){
            pc.mousePress(MouseEvent.BUTTON3_MASK);
            pc.mouseRelease(MouseEvent.BUTTON3_MASK);
        }
        else if(msg.endsWith("e")){
            pc.mousePress(MouseEvent.BUTTON1_MASK);
            pc.mouseRelease(MouseEvent.BUTTON1_MASK);
        }
        else{
            int x = Integer.parseInt(msg.substring(msg.indexOf("x")+1, msg.indexOf("y")));
            int y = Integer.parseInt(msg.substring(msg.indexOf("y")+1));
            if(xAtual == 0){
                xAtual = mouse.x;
                yAtual = mouse.y;
            }
            xAtual += x;
            yAtual += y;
            if(xAtual < 0) xAtual = 1;
            if(xAtual > screenX) xAtual = screenX;
            if(yAtual < 0) yAtual = 0;
            if(yAtual > screenY) yAtual = screenY;
            x = xAtual;
            y = yAtual;
            pc.mouseMove(x, y);
        }
    }
    
    @Override
    public void recebeStatus(String status){
        atualizarHistorico(status);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAtualizarLista;
    private javax.swing.JButton btnConectar;
    private javax.swing.JLabel lblDispositivoSelecionado;
    private javax.swing.JLabel lblDispositivosPareados;
    private javax.swing.JLabel lblHistorico;
    private javax.swing.JLabel lblMac;
    private javax.swing.JLabel lblMacDispositivo;
    private javax.swing.JLabel lblNome;
    private javax.swing.JLabel lblNomeDispositivo;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblStatusDispositivo;
    private javax.swing.JList<String> lstDispositivos;
    private javax.swing.JPanel pnlDetalhes;
    private javax.swing.JPanel pnlHistorico;
    private javax.swing.JScrollPane scrollDispositivos;
    // End of variables declaration//GEN-END:variables


}
